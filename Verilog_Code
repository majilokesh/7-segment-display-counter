module sevensegmentdisplay( out, clk, reset, enable );
  output reg [7:0] out;
  input reset, clk;
  reg [3:0]D0;
  reg [3:0] D1; ///D0,D1,D2 are my digits.
  reg [3:0]D2;
  reg [3:0]digit;
  output reg [2:0] enable;
  reg [29:0]counter;
  reg [25:0]sync;
  initial 
    begin D0=4'b0000; D1=4'b0000; D2=4'b0000;
    sync=3'b000; digit=4'b0000; counter=30'd0; end
    always@(posedge clk)
      begin
        if (reset)
          begin
            if (counter<30'd100000000)
              begin
                counter <= counter+1;
                $monitor("Counter: %d",D1);
              end
            else
              begin
                counter<=0;
                if (D0<9)
                 begin
                    D0<=D0+1;
                 end
                else
                 begin
                  D0<=0;
                  if(D1<9)
                    begin
                      D1<=D1+1;
                    end
                  else
                    begin
                      D1<=0;
                      if (D2<9)
                        begin
                          D2<=D2+1;
                        end
                      else
                        begin
                          D2<=0;
                        end
                     end
                   end
                end
              end
             else
              begin
                counter<=0;
                D0<=0;
                D1<=0;
                D2<=0;
              end
          end
        always@(posedge clk)
          begin
            if (reset)
              sync=sync+'d1;
            else
              sync=0;
          end
        always@(*)
          begin
            case({sync[20],sync[19],sync[18]})
              'b000: begin enable=~(3'b001); digit=D0; end
              'b001: begin enable=~(3'b010); digit=D1; end
              'b010: begin enable=~(3'b100); digit=D2; end
              'b011: begin enable=~(3'b001); digit=D0; end
              'b100: begin enable=~(3'b010); digit=D1; end
              'b101: begin enable=~(3'b100); digit=D2; end
              'b110: begin enable=~(3'b001); digit=D0; end
              'b111: begin enable=~(3'b010); digit=D1; end
              default: digit=0;
            endcase
          end
        always@(*)
          begin
            case(digit)
              4'b0000 : out = ~(8'b11111100);
              4'b0001 : out = ~(8'b01100000);
              4'b0010 : out = ~(8'b11011010);
              4'b0011 : out = ~(8'b11110010);
              4'b0100 : out = ~(8'b01100110);
              4'b0101 : out = ~(8'b10110110);
              4'b0110 : out = ~(8'b10111110);
              4'b0111 : out = ~(8'b11100000);
              4'b1000 : out = ~(8'b11111110);
              4'b1001 : out = ~(8'b11110110);
              ////WE DON'T NEED BELOW THIS//// This is so
              because digits only go upto 9.
              4'b1010 : out = ~(8'b01110111);
              4'b1011 : out = ~(8'b01111100);
              4'b1100 : out = ~(8'b00111001);
              4'b1101 : out = ~(8'b01011110);
              4'b1110 : out = ~(8'b01111001);
              4'b1111 : out = ~(8'b01110001);
              default: out='b00000000;
            endcase
          end
endmodule
